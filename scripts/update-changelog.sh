#!/bin/bash

# Define o arquivo CHANGELOG
CHANGELOG_FILE="CHANGELOG.md"

# Obt√©m a data atual
CURRENT_DATE=$(date +%Y-%m-%d)

# Obt√©m a √∫ltima vers√£o do package.json para usar como t√≠tulo da nova se√ß√£o
# Verifica se o package.json existe e l√™ a vers√£o, caso contr√°rio, usa uma vers√£o padr√£o
if [ -f "package.json" ]; then
    VERSION=$(node -p "require('./package.json').version")
else
    echo "Aviso: package.json n√£o encontrado. Usando '0.0.0' como vers√£o padr√£o."
    VERSION="0.0.0" # Vers√£o padr√£o se package.json n√£o existir
fi

# --- Fun√ß√£o para obter commits ---
# Esta fun√ß√£o pega os commits desde o √∫ltimo commit do tipo "üîñ release".
# Se n√£o houver commit de release, usa o comportamento de fallback com tags ou √∫ltimos commits.
get_commits_for_changelog() {
    # Procura pelo √∫ltimo commit do tipo "üîñ release"
    LAST_RELEASE_COMMIT=$(git log --grep="üîñ release" -n 1 --pretty=format:"%H" 2>/dev/null)
    
    if [ -n "$LAST_RELEASE_COMMIT" ]; then
        # Pega todos os commits desde o √∫ltimo commit de release (excluindo o pr√≥prio commit de release)
        # Primeiro tentamos com o range padr√£o, depois com --all se necess√°rio
        COMMITS=$(git log "$LAST_RELEASE_COMMIT"..HEAD --pretty=format:"* %s (%h)" --no-merges 2>/dev/null)
        
        # Se n√£o encontrou commits com HEAD, tenta com a branch atual
        if [ -z "$COMMITS" ]; then
            CURRENT_BRANCH=$(git branch --show-current)
            COMMITS=$(git log "$LAST_RELEASE_COMMIT".."$CURRENT_BRANCH" --pretty=format:"* %s (%h)" --no-merges 2>/dev/null)
        fi
        
        # Se ainda n√£o encontrou, tenta buscar todos os commits ap√≥s o release
        if [ -z "$COMMITS" ]; then
            COMMITS=$(git log --all --since="$(git log -1 --pretty=format:%ci "$LAST_RELEASE_COMMIT")" --pretty=format:"* %s (%h)" --no-merges | grep -v "üîñ release")
        fi
        
        echo "$COMMITS"
    else
        # Fallback: comportamento anterior baseado em tags ou n√∫mero fixo de commits
        if git rev-parse --verify --quiet HEAD~1 >/dev/null; then
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null)
            if [ -n "$LAST_TAG" ]; then
                # Pega os commits desde a √∫ltima tag at√© HEAD
                git log "$LAST_TAG"..HEAD --pretty=format:"* %s (%h)" --no-merges
            else
                # Se n√£o houver tags, pega os √∫ltimos 20 commits
                git log -20 --pretty=format:"* %s (%h)" --no-merges
            fi
        else
            # Se n√£o houver commits suficientes para uma tag, ou se for um repo novo, pegue todos
            git log --pretty=format:"* %s (%h)" --no-merges
        fi
    fi
}

# Obt√©m a lista formatada de commits
COMMITS_LIST=$(get_commits_for_changelog)

# Verifica se a lista de commits est√° vazia
if [ -z "$COMMITS_LIST" ]; then
    echo "Nenhum novo commit encontrado desde o √∫ltimo release para a vers√£o $VERSION. CHANGELOG n√£o atualizado."
    exit 0
fi

# Formata a nova entrada do CHANGELOG
# Adiciona linhas em branco para melhor separa√ß√£o visual no Markdown
# Usamos "printf %b" para interpretar sequ√™ncias de escape como \n
NEW_CHANGELOG_ENTRY=$(printf "%b" "\n## $VERSION ($CURRENT_DATE)\n\n$COMMITS_LIST\n")

# Verifica se o arquivo CHANGELOG existe
if [ ! -f "$CHANGELOG_FILE" ]; then
    echo "# Changelog" > "$CHANGELOG_FILE"
    echo "Arquivo $CHANGELOG_FILE criado com cabe√ßalho inicial."
fi

# Usa um arquivo tempor√°rio para maior compatibilidade e seguran√ßa
# Isso evita problemas com 'sed -i' entre Linux e macOS
TEMP_CHANGELOG=$(mktemp)

# Copia a primeira linha (o t√≠tulo)
head -n 1 "$CHANGELOG_FILE" > "$TEMP_CHANGELOG"

# Adiciona a nova entrada abaixo do t√≠tulo
echo -e "$NEW_CHANGELOG_ENTRY" >> "$TEMP_CHANGELOG"

# Adiciona o restante do arquivo original (do 2¬∫ par√°grafo em diante)
tail -n +2 "$CHANGELOG_FILE" >> "$TEMP_CHANGELOG"

# Substitui o arquivo original pelo tempor√°rio
mv "$TEMP_CHANGELOG" "$CHANGELOG_FILE"

echo "CHANGELOG.md atualizado com a vers√£o $VERSION e commits desde o √∫ltimo release."
echo -e "$NEW_CHANGELOG_ENTRY"
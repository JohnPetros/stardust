import type { TextBlockDto } from '@stardust/core/global/entities/dtos'

export const texts: TextBlockDto[] = [
  {
    type: 'image',
    content: 'O pr√≥ximo desafio √© dobrar cada n√∫mero de uma lista.',
    picture: 'tubarao-malvado.jpg',
  },
  {
    type: 'default',
    content:
      'Por exemplo, a partir de uma lista sendo *[1, 2, 3, 4]*, deve ser gerarada uma lista com *[2, 4, 6, 8]*.',
    picture: 'tubarao-malvado.jpg',
  },
  {
    type: 'code',
    content: `var numeros = [1, 2, 3, 4]
var novaLista = []

para (var i = 0; i < numeros.tamanho(); i++) {
  var novoNumero = numeros[i] * 2
  novaLista.adicionar(novoNumero)
}

escreva(novaLista)
// Resultado: [2, 4, 6, 8]`,
    isRunnable: true,
  },
  {
    type: 'user',
    content: 'Pronto üòé.',
  },
  {
    type: 'default',
    content: 'Muito bem!!',
    picture: 'panda-pulando-de-alegria.jpg',
  },
  {
    type: 'default',
    content: 'S√≥ que, h√° uma maneira de fazer exatamente isso em bem menos linhas.',
    picture: 'panda-dando-risadinha.jpg',
  },
  {
    type: 'user',
    content: 'Como?',
  },
  {
    type: 'default',
    content: 'Usando fun√ß√µes de alta ordem!',
    picture: 'panda-sorrindo-sentado.jpg',
  },
  {
    type: 'quote',
    title: 'Fun√ß√µes de alta ordem',
    content:
      'Fun√ß√µes de alta ordem ou fun√ß√µes de ordem superior (vamos chamar de apenas fun√ß√µes avan√ßadas) s√£o fun√ß√µes que recebem outras fun√ß√µes como par√¢metro.',
    picture: 'panda-oferecendo-bambu.jpg',
  },
  {
    type: 'code',
    content: `funcao cumprimente() {
  escreva("Ol√°!")
}

funcao souOutraFuncao(funcaoCumprimente) {
  funcaoCumprimente()
}

souOutraFuncao(cumprimente)
// Resultado: Ol√°!`,
    isRunnable: true,
  },
  {
    type: 'quote',
    content:
      'Nesse exemplo, a fun√ß√£o *cumprimente()* foi passada como par√¢metro para a fun√ß√£o *souOutraFuncao()*. Assim, a fun√ß√£o *cumprimente()* foi executada dentro de *souOutraFuncao()*.',
    picture: 'panda.jpg',
  },
  {
    type: 'quote',
    content:
      'Uma fun√ß√£o avan√ßada tamb√©m √© aquela que retorna uma fun√ß√£o que foi passada como par√¢metro.',
    picture: 'panda-piscando.jpg',
  },
  {
    type: 'code',
    content: `funcao somar(num1, num2) {
  retorna num1 + num2
}

funcao executeSomar(num1, num2, somar) {
 retorna somar(num1, num2)
}

escreva(executeSomar(1, 2, somar))
// Resultado: 3`,
    isRunnable: true,
    picture: 'panda.jpg',
  },
  {
    type: 'default',
    content:
      'Neste exemplo, a fun√ß√£o *executeSomar()* recebe 3 par√¢metros. Os dois primeiros s√£o n√∫meros e o terceiro √© uma fun√ß√£o que soma dois n√∫meros.',
    picture: 'panda-andando-com-bambu.jpg',
  },
  {
    type: 'default',
    content:
      'A fun√ß√£o *somar()* √© executada dentro da fun√ß√£o *executeSomar()* usando os par√¢metros que foram originalmente passados para a fun√ß√£o *executeSomar()*.',
    picture: 'panda-andando-com-bambu.jpg',
  },
  {
    type: 'default',
    content: 'E o retorno de *somar()* √© retornado pela fun√ß√£o *executeSomar()*.',
    picture: 'panda-andando-com-bambu.jpg',
  },
  {
    type: 'default',
    content: 'Parece complicado? Com certeza √©.',
    picture: 'panda-rindo-deitado.jpg',
  },
  {
    type: 'default',
    content:
      'Contudo, voc√™ percebeu que a forma de escrever uma fun√ß√£o desse tipo n√£o √© diferente de escrever uma fun√ß√£o normal.',
    picture: 'panda.jpg',
  },
  {
    type: 'default',
    content:
      'Ent√£o, no final das contas, *fun√ß√£o de ordem superior* acaba sendo um nome chique de fun√ß√µes que recebem ou que retornam outras fun√ß√µes.',
    picture: 'panda-sorrindo.jpg',
  },
  {
    type: 'default',
    content:
      'Mas porque eu estou explicando isso? Porque a fun√ß√£o nativa que iremos usar agora √© uma fun√ß√£o desse tipo.',
    picture: 'panda-segurando-bambu-de-pe.jpg',
  },
  {
    type: 'default',
    content:
      'Existem algumas fun√ß√µes avan√ßadas que devem ser usadas especificamente para listas, e uma delas √© o *mapear()*.',
    picture: 'panda-amando-bambu.jpg',
  },
  {
    type: 'quote',
    title: 'M√©todo mapear()',
    content:
      'O m√©todo *mapear()* transforma cada elemento de uma lista por meio de um la√ßo, retornando um nova lista.',
    picture: 'panda-amando-bambu.jpg',
  },
  {
    type: 'default',
    content: 'Para escrev√™-la √© simples:',
    picture: 'panda.jpg',
  },
  {
    type: 'code',
    content: 'var novaLista = listaOriginal.mapear(funcaoTranformadora)',
    isRunnable: false,
  },
  {
    type: 'quote',
    content:
      'O *mapear()* recebe como par√¢metro uma fun√ß√£o transformadora, ou seja, uma fun√ß√£o que transformar√° cada elemento da lista original.',
    picture: 'panda-de-oculos.jpg',
  },
  {
    type: 'default',
    content:
      'Quando o *mapear()* for executada essa fun√ß√£o transformadora ser√° aplicada a cada elemento da lista original. E cada elemento retornado por essa fun√ß√£o ser√° inclu√≠do em um nova lista.',
    picture: 'panda-de-oculos.jpg',
  },
  {
    type: 'default',
    content:
      'No nosso caso, a fun√ß√£o transformadora ser√° a fun√ß√£o que dobra um n√∫mero. Ent√£o, vamos cri√°-la.',
    picture: 'panda-piscando-sentado.jpg',
  },
  {
    type: 'code',
    content: ` var numeros = [1, 2, 3, 4]

funcao dobre(numero) {
  retorna numero * 2
}
      
var novosNumeros = mapear(numeros, dobre)

escreva(novosNumeros)

// Resultado: [2, 4, 6, 8]`,
    isRunnable: true,
  },
  {
    type: 'default',
    content:
      'A fun√ß√£o transformadora, no caso *dobre()*, est√° recebendo o par√¢metro *numero*. Mas de onde esse par√¢metro est√° vindo?',
    picture: 'panda-pensando.jpg',
  },
  {
    type: 'default',
    content:
      'Lembra-se de que eu disse que *mapear()* aplica um la√ßo na lista original, passando cada item da lista como par√¢metro para a fun√ß√£o transformadora?',
    picture: 'panda-sorrindo.jpg',
  },
  {
    type: 'default',
    content:
      'A cada itera√ß√£o desse la√ßo a fun√ß√£o *dobre()* √© executada recebendo como par√¢metro o n√∫mero atual da lista *numeros*.',
    picture: 'panda-sorrindo.jpg',
  },
  {
    type: 'user',
    content: 'Que?',
  },
  {
    type: 'default',
    content:
      'Bugou agora? Aqui temos uma fun√ß√£o que mostra o funcionamento do *mapear()* por baixo dos panos.',
    picture: 'panda.jpg',
  },
  {
    type: 'code',
    content: `funcao meuMapear(lista, funcaoTrasnformadora) {
  var novaLista = []
        
  para (var i = 0; i < lista.tamanho(); i++) {
    var elementoTransformado = funcaoTrasnformadora(lista[i])
    novaLista.adicionar(elementoTransformado)
  }
        
  retorna novaLista
}`,
    isRunnable: false,
  },
  {
    type: 'user',
    content: 'Hmm...',
  },
  {
    type: 'default',
    content:
      '√â bem parecido com o la√ßo que criamos logo no come√ßo, n√£o √©? S√≥ que o *mapear()* faz isso automaticamente, veja de novo.',
    picture: 'panda-segurando-bambu-de-pe.jpg',
  },
  {
    type: 'code',
    content: `var numeros = [1, 2, 3, 4]

funcao dobre(numero) {
  retorna numero * 2
}
      
var novosNumeros = mapear(numeros, dobre)

escreva(novosNumeros)
// Resultado: [2,4,6,8]`,
    isRunnable: true,
    picture: 'panda.jpg',
  },
  {
    type: 'image',
    content:
      'Ok, voc√™s passaram nesse desafio. O pr√≥ximo √© criar uma lista com os n√∫meros de outra lista que s√£o maiores que 10.',
    picture: 'tubarao-malvado.jpg',
  },
  {
    type: 'default',
    content:
      'Por exemplo, uma lista *[1, 4, 9, 12, 45, 60]* deve gerar uma lista *[12, 45, 60]*.',
    picture: 'tubarao-malvado.jpg',
  },
  {
    type: 'default',
    content:
      'Ok, n√£o ser√° poss√≠vel resolver esse desafio com *mapear()*, porque esse m√©todo de lista retorna obrigatoriamente uma lista com a mesma quantidade de itens da lista original.',
    picture: 'panda-sorrindo-sentado.jpg',
  },
  {
    type: 'default',
    content: 'E a lista gerada nesse desafio pode ter bem menos, n√£o √©?',
    picture: 'panda-triste.jpg',
  },
  {
    type: 'default',
    content:
      'Ent√£o teremos que usar outra fun√ß√£o avan√ßada, no caso uma que filtre os elementos de uma lista.',
    picture: 'panda.jpg',
  },
  {
    type: 'default',
    content: 'Esse √© um trabalho para a fun√ß√£o *filtrarPor()*.',
    picture: 'panda-sorrindo.jpg',
  },
  {
    type: 'quote',
    title: 'M√©todo filtrarPor()',
    content:
      'Esse m√©todo cria uma outra lista contendo apenas os elementos da lista original que passarem em uma condi√ß√£o fornecida.',
    picture: 'panda-piscando.jpg',
  },
  {
    type: 'quote',
    content:
      'E j√° que ele √© uma fun√ß√£o avan√ßada, assim como o *mapear()*, ele cria um la√ßo na lista, onde cada elemento da lista √© passado como par√¢metro para fun√ß√£o filtradora.',
    picture: 'panda.jpg',
  },
  {
    type: 'code',
    content: 'var novaLista = listaOriginal.filtrarPor(funcaoFiltradora)',
    isRunnable: false,
  },
  {
    type: 'default',
    content: 'Ent√£o, no nosso caso:',
    picture: 'panda-segurando-bambu-de-pe.jpg',
  },
  {
    type: 'code',
    content: `var numeros = [5, 10, 15, 20]

funcao verifiqueSeEMaiorQue10(numero) {
  retorna numero > 10
}
              
var numerosFiltrados = filtrarPor(numeros, verifiqueSeEMaiorQue10)
      
escreva(numerosFiltrados)
// Resultado: [15, 20]`,
    isRunnable: true,
    picture: 'panda.jpg',
  },
  {
    type: 'default',
    content:
      'Est√° vendo que a fun√ß√£o *verifiqueSeEMaiorQue10()* retorna um valor l√≥gico?',
    picture: 'panda.jpg',
  },
  {
    type: 'default',
    content:
      'Isso porque a fun√ß√£o filtradora deve, obrigatoriamente, retornar um valor l√≥gico, que determina o seguinte:',
    picture: 'panda-sorrindo-sentado.jpg',
  },
  {
    type: 'quote',
    content: 'Se for verdadeiro, o elemento atual √© colocado na nova lista.',
    picture: 'panda-sorrindo-sentado.jpg',
  },
  {
    type: 'quote',
    content: 'Caso seja falso, ele n√£o √© inclu√≠do na nova lista.',
    picture: 'panda-sorrindo-sentado.jpg',
  },
  {
    type: 'default',
    content:
      'Por exemplo, se em outra situa√ß√£o o retorno da fun√ß√£o filtradora fosse sempre *verdadeiro*, nenhum elemento da lista original seria exclu√≠do.',
    picture: 'panda-fazendo-coracao.jpg',
  },
  {
    type: 'code',
    content: `var numeros = [5, 10, 15, 20]

funcao verifiqueSeEMaiorQue10(numero) {
  retorna verdadeiro
}
              
var numerosFiltrados = numeros.filtrarPor(verifiqueSeEMaiorQue10)
      
escreva(numerosFiltrados)
// Resultado:[5, 10, 15, 20]`,
    isRunnable: true,
  },
  {
    type: 'default',
    content: 'E se fosse falso...',
    picture: 'panda-sorrindo.jpg',
  },
  {
    type: 'code',
    content: `var numeros = [5, 10, 15, 20]

funcao verifiqueSeEMaiorQue10(numero) {
  retorna falso
}
              
var numerosFiltrados = numeros.filtrarPor(verifiqueSeEMaiorQue10)
      
escreva(numerosFiltrados)
// Resultado: []`,
    isRunnable: true,
  },
  {
    type: 'default',
    content:
      'Talvez voc√™ ache que o nome da fun√ß√£o filtradora grande demais (o que n√£o √© problema nenhum, quanto mais descritivo melhor). Voc√™ pode usar uma fun√ß√£o an√¥nima no lugar tamb√©m.',
    picture: 'panda-segurando-bambu-de-pe.jpg',
  },
  {
    type: 'default',
    content: 'Assim √≥:',
    picture: 'panda-sorrindo.jpg',
  },
  {
    type: 'code',
    content: `var numeros = [5, 10, 15, 20]

var numerosFiltrados = filtrarPor(numeros, funcao(numero) {
  retorna numero > 10
})
      
escreva(numerosFiltrados)
// Resultado: [15, 20]`,
    isRunnable: true,
  },
  {
    type: 'default',
    content:
      'Essa √© uma das vantagens da fun√ß√£o an√¥nima que eu disse antes, de criar a fun√ß√£o diretamente como par√¢metro de outra fun√ß√£o.',
    picture: 'panda-deslumbrado.jpg',
  },
  {
    type: 'default',
    content:
      'E antes que pergunte, sim, tamb√©m d√° para usar uma fun√ß√£o an√¥nima no *mapear()*.',
    picture: 'panda-comemorando.jpg',
  },
  {
    type: 'code',
    content: `
var numeros = [1, 2, 3, 4]

var novosNumeros = mapear(numeros, funcao(numero) {
  retorna numero * 2
})

escreva(novosNumeros)
// Resultado: [2,4,6,8]`,
    isRunnable: true,
    picture: 'panda.jpg',
  },
  //   {
  //     type: "image",
  //     content:
  //       "Aqui est√° o √∫ltimo: Ordenar uma lista de n√∫meros em ordem decrescente.",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "image",
  //     content:
  //       "Por exemplo, uma lista *[12, 8, 2, 25, 16]* deve gerar uma lista *[25, 16, 12, 8, 2]*",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "default",
  //     content:
  //       "Ok, voc√™ sabe qual m√©todo de lista devemos utilizar para ordernar listas?",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "user",
  //     content: "Use o m√©todo *ordernar()*",
  //   },
  //   {
  //     type: "default",
  //     content:
  //       "Sim! Por√©m, o m√©todo *ordernar()* por padr√£o s√≥ ordena n√∫meros em ordem crescente",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "code",
  //     content: `
  // escreva([12, 8, 2, 25, 16].ordenar())

  // // resultado: [2,8,12,16,25]
  //     `,
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "alert",
  //     content:
  //       "antes que pergunte, √© poss√≠vel sim utlizar qualquer m√©todo de lista diretamente na lista em vez na vari√°vel que armazena essa lista.",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "code",
  //     content: `
  // escreva(['a', 'b', 'c'].tamanho()

  // escreva([1, 2, 3].inverter())

  // escreva([1, 2, 3].somar())

  // escreva([1, 2, 3].concatenar([4]))

  // escreva([1, 2, 3].remover(1))`,
  //     isRunnable: true,
  //   },
  //   {
  //     type: "alert",
  //     content: "Isso vale para textos tamb√©m.",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "default",
  //     content: "Lembra que eu disse que √© poss√≠vel customizar o m√©todo *ordenar()*?",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "user",
  //     content: "Ent√£o essa √© a hora perfeita!",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "default",
  //     content:
  //       "A customiza√ß√£o √© poss√≠vel, pois o m√©todo *ordenar()* tamb√©m pode ser utilizada como uma fun√ß√£o de alta ordem.",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "default",
  //     content:
  //       "Desse modo, poderemos passar uma fun√ß√£o como par√¢metro de *ordenar()*, que ter√° como papel personalizar a ordena√ß√£o em si",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "code",
  //     content: `var numeros = [1, 2, 3, 4, 5, 6]

  // funcao ordeneEmOrdemDecrescente() {

  // }

  // escreva(numeros.ordenar(ordeneEmOrdemDecrescente))`,
  //     isRunnable: false,
  //   },
  //   {
  //     type: "default",
  //     content:
  //       "A fun√ß√£o passada como par√¢metro de ordenar, nesse caso a fun√ß√£o *ordeneEmOrdemDecrescente* receber√° 2 par√¢metros em cada itera√ß√£o, que chamaremos de *primeiroNumero* e *segundoNumero*",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "code",
  //     content: `var numeros = [1, 2, 3, 4, 5, 6]

  // funcao ordeneEmOrdemDecrescente(primeiroNumero, segundoNumero) {

  // }

  // escreva(numeros.ordenar(ordeneEmOrdemDecrescente))`,
  //     isRunnable: false,
  //   },
  //   {
  //     type: "default",
  //     content:
  //       "Veja que *primeiroNumero* e *segundoNumero* sempre v√£o mudar de valor a cada itera√ß√£o.",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "code",
  //     content: `var numeros = [1, 2, 3, 4, 5, 6]

  // funcao ordeneEmOrdemDecrescente(primeiroNumero, segundoNumero) {
  //   escreva(primeiroNumero)
  //   escreva(segundoNumero)
  // }`,
  //     isRunnable: true,
  //   },
  //   {
  //     type: "default",
  //     content:
  //       "Na primeira itera√ß√£o, *primeiroNumero* e *segundoNumero* ter√£o, respectivamente, os valores *1* e *2*, na pr√≥xima *3* e *4* e, por fim, *5* e *6*.",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "user",
  //     content:
  //       "Entendi!",
  //   },
  //   {
  //     type: "default",
  //     content:
  //       "Mas assim n√£o estamos ordenando nada! Para ordenar de fato a fun√ß√£o ordernadora deve retornar 0, um n√∫mero positivo ou um n√∫mero negativo.",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "quote",
  //     content:
  //       "Se retornar um n√∫mero positivo: o valor de *primeiroNumero* assumir√° a posi√ß√£o que est√° √† direita do *segundoNumero*.",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "quote",
  //     content:
  //       "Se retornar um n√∫mero negativo: o valor de *segundoNumero* assumir√° a posi√ß√£o que est√° √† esquerda do *primeiroNumero*.",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "quote",
  //     content: "Se retornar zero: Nada acontece.",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "quote",
  //     content: "Ent√£o, por exemplo, se eu retornar -1",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "code",
  //     content: `var numeros = [1, 2, 3, 4, 5, 6]

  // funcao ordeneEmOrdemDecrescente(primeiroNumero, segundoNumero) {
  //   retorna -1
  // }

  // escreva(numeros.ordenar(ordeneEmOrdemDecrescente))

  // // Resultado: [6,5,4,1,2,3]`,
  //     isRunnable: false,
  //   },
  //   {
  //     type: "default",
  //     content: "A lista ser√° ordenada de forma decrescente, visto que retornando um n√∫mero o *primeiroNumero* sempre ser√° reposicionado na posi√ß√£o √† direita de *segundoNumero*.",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "user",
  //     content: "Ent√£o j√° conclu√≠mos com sucesso esse desafio!",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "default",
  //     content:
  //       "N√£o n√£o n√£o. Na verdade deu certo porque os n√∫meros j√° estavam em uma ordem favor√°vel.",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "default",
  //     content:
  //       "Mas e se fosse aplicado a uma lista com n√∫meros desordenados como a do desafio.",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "code",
  //     content: `var numeros = [12, 8, 2, 25, 16]

  // funcao ordeneEmOrdemDecrescente(primeiroNumero, segundoNumero) {
  //   retorna -1
  // }

  // escreva(numeros.ordenar(ordeneEmOrdemDecrescente))

  // // Resultado: [12,8,2,25,16]`,
  //     isRunnable: false,
  //   },
  //   {
  //     type: "user",
  //     content:
  //       "N√£o deu nada certo üôÑ.",
  //   },
  //   {
  //     type: "default",
  //     content:
  //       "Exatamente! Precisamos arrumar um jeito de deixar o retorno da fun√ß√£o ordenadora de forma din√¢mica. Para isso podemos fazer o seguinte.",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "code",
  //     content: `var numeros = [12, 8, 2, 25, 16]

  // funcao ordeneEmOrdemDecrescente(primeiroNumero, segundoNumero) {
  //   retorna segundoNumero - primeiroNumero
  // }

  // escreva(numeros.ordenar(ordeneEmOrdemDecrescente))

  // // Resultado: [25,16,12,8,2]`,
  //     isRunnable: false,
  //   },
  //   {
  //     type: "default",
  //     content:
  //       "Mas porque agora deu certo.",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "default",
  //     content:
  //       "Lembre-se que √© preciso retorna um n√∫mero positivo ou negativo. Se o *segundoNumero* for maior que *primeiroNumero*, a subtra√ß√£o resultar√° em um n√∫mero positivo, o *segundoNumero* sempre estar√° uma posi√ß√£o antes de *primeiroNumero*.",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "default",
  //     content:
  //       "Isso acontece, por exemplo, quando *segundoNumero* √© 8 e *primeiroNumero* √© 12.",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "default",
  //     content:
  //       "Agora, se o resultado da subtra√ß√£o for um n√∫mero positivo, o *primeiroNumero* sempre ser√° reposicionado antes de *segundoNumero*.",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "default",
  //     content:
  //       "Isso acontece, por exemplo, quando *segundoNumero* √© 25 e *primeiroNumero* √© 2.",
  //     picture: "panda.jpg",
  //   },
  //   {
  //     type: "user",
  //     content:
  //       "Agora sim, eu realmente entendi!",
  //   },
  //   {
  //     type: "default",
  //     content:
  //       "√ìtimo! Agora vamos para o prox√≠mo desafio.",
  //     picture: "panda.jpg",
  //   },
  {
    type: 'image',
    content: 'Puxa! Voc√™s conseguiram resolver todos os desafios.',
    picture: 'tubarao-malvado.jpg',
  },
  {
    type: 'image',
    content: 'Voc√™s podem ver a princesa. Ela est√° no castelo logo √† frente.',
    picture: 'castelo-alien.jpg',
  },
  {
    type: 'default',
    content: 'Espera a√≠! A pessoa que pediu nossa ajuda √© uma princesa?',
    picture: 'panda-espantado.jpg',
  },
]
